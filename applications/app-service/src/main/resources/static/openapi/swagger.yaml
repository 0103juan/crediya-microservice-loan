openapi: 3.0.3
info:
  title: API de Préstamos - CrediYa
  description: API para registrar y gestionar solicitudes de préstamo en el sistema CrediYa.
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo Crediya
    url: https://www.crediya.com/soporte
    email: dev-support@crediya.com
servers:
  - url: http://localhost:8080
    description: Servidor de desarrollo local
  - url: https://api.dev.crediya.com
    description: Servidor de entorno de desarrollo
tags:
  - name: Préstamos
    description: Operaciones relacionadas con la creación y gestión de solicitudes de préstamos.
paths:
  /api/v1/loans:
    post:
      summary: Registrar una nueva solicitud de préstamo
      description: Permite a un usuario autenticado con el rol 'CLIENTE' registrar una nueva solicitud de préstamo. El correo del usuario se obtiene del token de autenticación.
      operationId: registerLoan
      tags:
        - Préstamos
      security:
        - BearerAuth: []
      requestBody:
        description: Datos requeridos para crear la solicitud de préstamo.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterLoanRequest"
      responses:
        "201":
          description: Solicitud de préstamo registrada exitosamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoanResponse"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RegisterLoanRequest:
      type: object
      required:
        - amount
        - term
        - loanType
      properties:
        amount:
          type: number
          format: double
          description: "Monto del préstamo solicitado. Debe ser mayor a 0 y menor o igual a 100,000,000."
          example: 50000.00
        term:
          type: integer
          description: "Plazo del préstamo en meses. Debe estar entre 1 y 60."
          example: 24
        loanType:
          type: integer
          description: "ID del tipo de préstamo."
          example: 1

    LoanResponse:
      type: object
      description: "Contiene los datos de la solicitud de préstamo creada."
      properties:
        userEmail:
          type: string
          format: email
          description: "Correo electrónico del solicitante."
          example: "juan.perez@example.com"
        userIdNumber:
          type: string
          description: "Número de documento de identidad del solicitante."
          example: "123456789"
        state:
          type: string
          description: "Estado inicial de la solicitud de préstamo."
          example: "REVIEW_PENDING"

    ApiResponseLoanResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        code:
          type: string
          example: "LOAN_REQUEST_SUCCESSFULLY"
        message:
          type: string
          example: "Solicitud de préstamo registrada exitosamente."
        path:
          type: string
          example: "/api/v1/loans/123456789"
        data:
          $ref: "#/components/schemas/LoanResponse"

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: "Fecha y hora en que ocurrió el error."
        status:
          type: integer
          description: "Código de estado HTTP."
        code:
          type: string
          description: "Código de error personalizado de la aplicación."
        message:
          type: string
          description: "Mensaje detallado del error."
        path:
          type: string
          description: "La ruta del endpoint donde ocurrió el error."
        errors:
          type: object
          description: "Mapa con detalles específicos de los errores de validación (si aplica)."
          additionalProperties:
            type: array
            items:
              type: string
          example:
            amount: ["El monto del préstamo debe ser mayor que cero."]

  responses:
    BadRequest:
      description: "Error de validación en los datos de la solicitud."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validationError:
              summary: "Datos de solicitud inválidos"
              value:
                status: 400
                code: "LOAN_VALIDATION_ERROR"
                message: "La solicitud tiene errores de validación."
                path: "/api/v1/loans"
                errors:
                  term: ["El plazo máximo es de 60 meses."]
    Unauthorized:
      description: "No autorizado. Se requiere un token JWT válido."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: "Token inválido o ausente"
              value:
                status: 401
                code: "UNAUTHORIZED"
                message: "Acceso no autorizado."
                path: "/api/v1/loans"
    Forbidden:
      description: "Acceso denegado. El usuario no tiene los permisos necesarios."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: "Permisos insuficientes"
              value:
                status: 403
                code: "FORBIDDEN"
                message: "No tiene los permisos para realizar esta acción."
                path: "/api/v1/loans"
    NotFound:
      description: "Recurso no encontrado. Puede ocurrir si el usuario autenticado o el tipo de préstamo no existen."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            userNotFound:
              summary: "Usuario no registrado"
              value:
                status: 404
                code: "USER_NOT_FOUND"
                message: "El usuario ejemplo@correo.com no está registrado."
                path: "/api/v1/loans"
            invalidLoanType:
              summary: "Tipo de préstamo no válido"
              value:
                status: 404
                code: "INVALID_LOAN_TYPE"
                message: "El tipo de préstamo con ID 99 no existe."
                path: "/api/v1/loans"
    InternalServerError:
      description: "Error interno del servidor."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            serverError:
              summary: "Error inesperado"
              value:
                status: 500
                code: "INTERNAL_SERVER_ERROR"
                message: "Ocurrió un error inesperado en el servidor."
                path: "/api/v1/loans"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Se requiere un token JWT en el encabezado 'Authorization': 'Bearer {token}'"