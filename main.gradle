apply plugin: 'info.solidsoft.pitest.aggregator'

allprojects {
    repositories {
        mavenCentral()
        maven { url = "https://repo.spring.io/snapshot" }
        maven { url = "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    compileJava.dependsOn validateStructure

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    //build.dependsOn 'pitest'

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.13.RELEASE'

        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    pitest {
        targetClasses = ['co.com.pragma.*']
        excludedClasses = []
        excludedTestClasses = []
        pitestVersion = '1.20.1'
        verbose = false
        outputFormats = ['XML', 'HTML']
        threads = 8
        exportLineCoverage = true
        useClasspathFile = true
        timestampedReports = false
        //mutators = ['STRONGER', 'DEFAULTS']
        fileExtensionsToFilter.addAll('xml', 'orbit')
        junit5PluginVersion = '1.2.2'
        failWhenNoMutations = false
        jvmArgs = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
    }

    jacocoTestReport {
        dependsOn test, 'pitest'
        reports {
            xml.setRequired true
            xml.setOutputLocation layout.buildDirectory.file("reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = [test, subprojects.jacocoTestReport, pitestReportAggregate]

    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }

    group = 'Domain' // Corregido
    sourceSets(subprojects.findAll { it.name in ['model', 'usecase'] }.sourceSets.main as SourceSet[])

    group = 'Application' // Corregido
    sourceSets(subprojects.findAll { it.name == 'app-service' }.sourceSets.main as SourceSet[])

    group = 'Infrastructure/Entry Points' // Corregido
    sourceSets(subprojects.findAll { it.name == 'reactive-web' }.sourceSets.main as SourceSet[])

    group = 'Infrastructure/Driven Adapters' // Corregido
    sourceSets(subprojects.findAll { it.name in ['r2dbc-postgresql', 'web-client'] }.sourceSets.main as SourceSet[])

    group = 'Infrastructure/Helpers' // Corregido
    sourceSets(subprojects.findAll { it.name == 'request-validator' }.sourceSets.main as SourceSet[])

    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                '**/co/com/pragma/api/security/**'
        ])
    }))
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

pitestReportAggregate {
    doLast {
        def reportDir = layout.buildDirectory.dir("reports/pitest").get().asFile
        def consolidatedReport = new File(reportDir, 'mutations.xml')
        consolidatedReport.withWriter { writer ->
            writer.write("<mutations>\n")
            subprojects.each { subproject ->
                def xmlReport = subproject.layout.buildDirectory.file("reports/pitest/mutations.xml").get().asFile
                if (xmlReport.exists()) {
                    def xmlContent = xmlReport.text
                    xmlContent = xmlContent.replaceAll("<\\?xml[^>]*>", "")
                    xmlContent = xmlContent.replaceAll("</?mutations( partial=\"true\")?>", "")
                    writer.write(xmlContent.trim() + "\n")
                }
            }
            writer.write("</mutations>")
        }
    }
}

tasks.named('wrapper') {
    gradleVersion = '8.14.3'
}
